%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Configuration file for dpmsquare.m
%
% Author: Anne van Rossum
% Date: Jul, 2014
% Copyrights: Almende B.V., Rotterdam, The Netherlands
% License: LGPLv3
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Configuration parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

plot_avg_cov = false;

hyper0.dim=2;
% With a higher alpha there will be more lines formed, the chance to form a new cluster will increase
hyper0.alpha=5;

% mean for each cluster, D=2
hyper0.mu = zeros(hyper0.dim,1);
% used to multiply the covariance matrix with
hyper0.kappa = 0.001;
% nu should be larger than D-1
hyper0.nu = hyper0.dim+2;
% covariance matrix
% the spread of the objects over the entire space
hyper0.lambda = 8*eye(hyper0.dim);

% the number of items is fixed, it is not possible to get another item in an incremental fashion using this generator
n=2000;

% A larger value for alpha1 means more different types of lines
% The dimension is now (alpha1, length1, length2) for 2D, and (alpha1, alpha2, length1, length2) for 3D
switch (hyper0.dim)
case 2
	hyper1.dim=hyper0.dim+1;
case 3
	hyper1.dim=hyper0.dim+2;
endswitch

# A line is a 2D object, set to 2 in that case!
object_dim=2;
switch (object_dim)
case 3
	if (hyper0.dim == 2) 
		error ("It does not make sense to try to generate 3D objects in a 2D world")
	endif
	hyper1.dim += 1;
endswitch

hyper1.alpha=1;
hyper1.mu = zeros(hyper1.dim,1);
hyper1.kappa = 0.001;
hyper1.nu = hyper1.dim+1;
hyper1.lambda = 1*eye(hyper1.dim);

% A grid is an object that requires 4 parameters in 2D: dX, dY, #x, #y
hyper2.dim = 4;
hyper2.alpha=1;
hyper2.mu = zeros(hyper2.dim,1);
hyper2.kappa = 0.001;
hyper2.nu = hyper2.dim+1;
hyper2.lambda = 1*eye(hyper2.dim);


% choose noise distribution to be "normal" or "uniform"
%noise_distribution="normal";
noise_distribution="uniform";

test_same_angle=false;
same_angle=pi/3;

test_same_length=false;
same_length=4;

extremes_only=true;


